#! /usr/bin/env python

PACKAGE='tuw_object_tracking'
from dynamic_reconfigure.parameter_generator_catkin import *
gen = ParameterGenerator()

gen.add("num_particles", int_t, 0, "number of particles", 50, 1, 10000)
gen.add("print_tracks", bool_t, 0, "print tracks to stdout", False)
gen.add("print_particles", bool_t, 0, "print particles to stdout", False)
gen.add("sigma_meas", double_t, 0, "measurement noise", 0.5, 0, 10)
gen.add("cov_scale_meas", double_t, 0, "covariance scale for measurement model", 1.2, 0, 10)
gen.add("sigma_x_sys", double_t, 0, "system model noise in x", 0.1, 0, 10)
gen.add("sigma_y_sys", double_t, 0, "system model noise in y", 0.1, 0, 10)
gen.add("sigma_omega_sys", double_t, 0, "system model noise omega", 1.0, 0, 10)
gen.add("sigma_init_state", double_t, 0, "initial state noise", 0.1, 0, 10)
gen.add("resample_rate", double_t, 0, "resample rate", 1.0, 0, 1.0)
gen.add("deletion_cycles", int_t, 0, "delete after deletion_cycles cycles with no update", 120, 0, 5000)
gen.add("deletion_cycles_inv", int_t, 0, "delete after deletion_cycles_inv cycles with no update for invisible (new) tracks", 30, 0, 5000)
gen.add("promotion_cycles", int_t, 0, "promote track after promotion_cycles cycles with associated measurement", 3, 0, 50);
gen.add("angle_partitions", int_t, 0, "number of angle partitions for grid map sampling", 8, 0, 128);
gen.add("max_dist_for_association", double_t, 0, "maximum distance of a detection to be associated with track", 2.0, 0, 10);
gen.add("const_fwd_pred", bool_t, 0, "enable constant forward prediction (dont depend on meas time)", False);
gen.add("fwd_pred_time", double_t, 0, "constant forward prediction time in sec", 0.1, 0, 10.0);
gen.add("output_mean", bool_t, 0, "use particle mean instead of best particle as estimate", True);
gen.add("visually_confirmed", bool_t, 0, "only publish tracks based on visually confirmed detections", False);
gen.add("use_mahalanobis", bool_t, 0, "use mahalanobis distance for data association", False);
gen.add("enable_clustering", bool_t, 0, "enable particle clustering for multi-mode extraction", False);
gen.add("visual_confirmation_inc", int_t, 0, "visual confirmation increment, 2 if visual detection rate is similar to laser, increase if visual rate is lower", 2, 1, 10);
gen.add("gamma", double_t, 0, "scaling for heat map angular change", 1.0, 0.1, 1.0);

motion_model_enum = gen.enum(
  [
    gen.const("constant_vel", int_t, 0, "constant velocity model"),
    gen.const("heatmap", int_t, 2, "heatmap model"),
    gen.const("constant_acc", int_t, 3, "constant acceleration model"),
    gen.const("coordinated_turn", int_t, 4, "coordinated turn model"),
  ]
  , "motion model types"
)

measurement_model_enum = gen.enum(
  [
    gen.const("simple_dist", int_t, 0, "simple measurement model with eucl. distance"),
    gen.const("mahalanobis_dist", int_t, 1, "mahlanobis distance measurement model"),
  ]
  , "measurement model types"
)

grid_map_layer_enum = gen.enum(
  [
    gen.const("sum", int_t, 0, "sum of historical and likelihood field data"),
    gen.const("likelihood_field", int_t, 1, "likelihood field layer"),
  ]
  , "grid map layers for heat map"
)

particle_filter_output_modality_enum = gen.enum(
  [
    gen.const("output_best", int_t, 0, "output state from highest weight particle"),
    gen.const("output_mean", int_t, 1, "output state from mean over all particles"),
    gen.const("output_median", int_t, 2, "output median over all particles"),
  ]
  , "output modality of particle filter"
)

gen.add("motion_model", int_t, 0, "type of motion model used", 0, 0, 6, edit_method=motion_model_enum)
gen.add("measurement_model", int_t, 0, "type of measurement model used", 0, 0, 1, edit_method=measurement_model_enum)
gen.add("grid_map_layer", int_t, 0, "grid map layer to use", 0, 0, 1, edit_method=grid_map_layer_enum)
gen.add("particle_filter_output_modality", int_t, 1, 0, 2, edit_method=particle_filter_output_modality_enum)

exit(gen.generate(PACKAGE, "tuw_object_tracking_node", "tuw_object_tracking"))

